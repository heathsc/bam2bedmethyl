diff --git a/Cargo.lock b/Cargo.lock
index ae3239f..6d235c6 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "aho-corasick"
@@ -28,9 +28,9 @@ dependencies = [
 
 [[package]]
 name = "anstream"
-version = "0.6.14"
+version = "0.6.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b"
+checksum = "3ae563653d1938f79b1ab1b5e668c87c76a9930414574a6583a7b7e11a8e6192"
 dependencies = [
  "anstyle",
  "anstyle-parse",
@@ -43,49 +43,50 @@ dependencies = [
 
 [[package]]
 name = "anstyle"
-version = "1.0.7"
+version = "1.0.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b"
+checksum = "862ed96ca487e809f1c8e5a8447f6ee2cf102f846893800b20cebdf541fc6bbd"
 
 [[package]]
 name = "anstyle-parse"
-version = "0.2.4"
+version = "0.2.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4"
+checksum = "4e7644824f0aa2c7b9384579234ef10eb7efb6a0deb83f9630a49594dd9c15c2"
 dependencies = [
  "utf8parse",
 ]
 
 [[package]]
 name = "anstyle-query"
-version = "1.0.3"
+version = "1.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a64c907d4e79225ac72e2a354c9ce84d50ebb4586dee56c82b3ee73004f537f5"
+checksum = "9e231f6134f61b71076a3eab506c379d4f36122f2af15a9ff04415ea4c3339e2"
 dependencies = [
- "windows-sys",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "anstyle-wincon"
-version = "3.0.3"
+version = "3.0.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19"
+checksum = "3e0633414522a32ffaac8ac6cc8f748e090c5717661fddeea04219e2344f5f2a"
 dependencies = [
  "anstyle",
- "windows-sys",
+ "once_cell_polyfill",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "anyhow"
-version = "1.0.86"
+version = "1.0.99"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b3d1d046238990b9cf5bcde22a3fb3584ee5cf65fb2765f454ed428c7a0063da"
+checksum = "b0674a1ddeecb70197781e945de4b3b8ffb61fa939a5597bcf48503737663100"
 
 [[package]]
 name = "autocfg"
-version = "1.3.0"
+version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0"
+checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
 
 [[package]]
 name = "bam2bedmethyl"
@@ -107,56 +108,59 @@ dependencies = [
 
 [[package]]
 name = "bitflags"
-version = "2.5.0"
+version = "2.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1"
+checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"
 
 [[package]]
 name = "bumpalo"
-version = "3.16.0"
+version = "3.19.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"
+checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"
 
 [[package]]
 name = "cc"
-version = "1.0.98"
+version = "1.2.33"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "41c270e7540d725e65ac7f1b212ac8ce349719624d7bcff99f8e2e488e8cf03f"
+checksum = "3ee0f8803222ba5a7e2777dd72ca451868909b1ac410621b676adf07280e9b5f"
+dependencies = [
+ "shlex",
+]
 
 [[package]]
 name = "cfg-if"
-version = "1.0.0"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"
 
 [[package]]
 name = "chrono"
-version = "0.4.38"
+version = "0.4.41"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401"
+checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
 dependencies = [
  "android-tzdata",
  "iana-time-zone",
  "js-sys",
  "num-traits",
  "wasm-bindgen",
- "windows-targets",
+ "windows-link",
 ]
 
 [[package]]
 name = "clap"
-version = "4.5.4"
+version = "4.5.45"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90bc066a67923782aa8515dbaea16946c5bcc5addbd668bb80af688e53e548a0"
+checksum = "1fc0e74a703892159f5ae7d3aac52c8e6c392f5ae5f359c70b5881d60aaac318"
 dependencies = [
  "clap_builder",
 ]
 
 [[package]]
 name = "clap_builder"
-version = "4.5.2"
+version = "4.5.44"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4"
+checksum = "b3e7f4214277f3c7aa526a59dd3fbe306a370daee1f8b7b8c987069cd8e888a8"
 dependencies = [
  "anstream",
  "anstyle",
@@ -166,15 +170,15 @@ dependencies = [
 
 [[package]]
 name = "clap_lex"
-version = "0.7.0"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce"
+checksum = "b94f61472cee1439c0b966b47e3aca9ae07e45d070759512cd390ea2bebc6675"
 
 [[package]]
 name = "colorchoice"
-version = "1.0.1"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422"
+checksum = "b05b61dc5112cbb17e4b6cd61790d9845d13888356391624cbe7e41efeac1e75"
 
 [[package]]
 name = "compress_io"
@@ -191,68 +195,81 @@ dependencies = [
 
 [[package]]
 name = "core-foundation-sys"
-version = "0.8.6"
+version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f"
+checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
 [[package]]
 name = "crossbeam-channel"
-version = "0.5.13"
+version = "0.5.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2"
+checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
 dependencies = [
  "crossbeam-utils",
 ]
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.8.20"
+version = "0.8.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
 
 [[package]]
 name = "errno"
-version = "0.3.9"
+version = "0.3.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba"
+checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
 dependencies = [
  "libc",
- "windows-sys",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "fastrand"
-version = "2.1.0"
+version = "2.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
+
+[[package]]
+name = "getrandom"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a"
+checksum = "335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "wasi 0.11.1+wasi-snapshot-preview1",
+]
 
 [[package]]
 name = "getrandom"
-version = "0.2.15"
+version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"
+checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
 dependencies = [
  "cfg-if",
  "libc",
- "wasi",
+ "r-efi",
+ "wasi 0.14.2+wasi-0.2.4",
 ]
 
 [[package]]
 name = "hermit-abi"
-version = "0.3.9"
+version = "0.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"
+checksum = "fc0fef456e4baa96da950455cd02c081ca953b141298e41db3fc7e36b1da849c"
 
 [[package]]
 name = "iana-time-zone"
-version = "0.1.60"
+version = "0.1.63"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141"
+checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
 dependencies = [
  "android_system_properties",
  "core-foundation-sys",
  "iana-time-zone-haiku",
  "js-sys",
+ "log",
  "wasm-bindgen",
  "windows-core",
 ]
@@ -268,59 +285,60 @@ dependencies = [
 
 [[package]]
 name = "is-terminal"
-version = "0.4.12"
+version = "0.4.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b"
+checksum = "e04d7f318608d35d4b61ddd75cbdaee86b023ebe2bd5a66ee0915f0bf93095a9"
 dependencies = [
  "hermit-abi",
  "libc",
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "is_terminal_polyfill"
-version = "1.70.0"
+version = "1.70.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800"
+checksum = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf"
 
 [[package]]
 name = "js-sys"
-version = "0.3.69"
+version = "0.3.77"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d"
+checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
 dependencies = [
+ "once_cell",
  "wasm-bindgen",
 ]
 
 [[package]]
 name = "lazy_static"
-version = "1.4.0"
+version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
+checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
 
 [[package]]
 name = "libc"
-version = "0.2.155"
+version = "0.2.175"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c"
+checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"
 
 [[package]]
 name = "linux-raw-sys"
-version = "0.4.14"
+version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89"
+checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"
 
 [[package]]
 name = "log"
-version = "0.4.21"
+version = "0.4.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c"
+checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
 
 [[package]]
 name = "memchr"
-version = "2.7.2"
+version = "2.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
 
 [[package]]
 name = "num-traits"
@@ -333,9 +351,9 @@ dependencies = [
 
 [[package]]
 name = "num_cpus"
-version = "1.16.0"
+version = "1.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"
+checksum = "91df4bbde75afed763b708b7eee1e8e7651e02d97f6d5dd763e89367e957b23b"
 dependencies = [
  "hermit-abi",
  "libc",
@@ -343,44 +361,59 @@ dependencies = [
 
 [[package]]
 name = "once_cell"
-version = "1.19.0"
+version = "1.21.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"
+
+[[package]]
+name = "once_cell_polyfill"
+version = "1.70.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92"
+checksum = "a4895175b425cb1f87721b59f0f286c2092bd4af812243672510e1ac53e2e0ad"
 
 [[package]]
 name = "os_pipe"
-version = "1.1.5"
+version = "1.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "57119c3b893986491ec9aa85056780d3a0f3cf4da7cc09dd3650dbd6c6738fb9"
+checksum = "db335f4760b14ead6290116f2427bf33a14d4f0617d49f78a246de10c1831224"
 dependencies = [
  "libc",
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.17"
+version = "0.2.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"
+checksum = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9"
+dependencies = [
+ "zerocopy",
+]
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.84"
+version = "1.0.97"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ec96c6a92621310b51366f1e28d05ef11489516e93be030060e5fc12024a49d6"
+checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
 dependencies = [
  "unicode-ident",
 ]
 
 [[package]]
 name = "quote"
-version = "1.0.36"
+version = "1.0.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
 dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "r-efi"
+version = "5.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"
+
 [[package]]
 name = "rand"
 version = "0.8.5"
@@ -408,7 +441,7 @@ version = "0.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
 dependencies = [
- "getrandom",
+ "getrandom 0.2.16",
 ]
 
 [[package]]
@@ -422,9 +455,9 @@ dependencies = [
 
 [[package]]
 name = "regex"
-version = "1.10.4"
+version = "1.10.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c"
+checksum = "4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619"
 dependencies = [
  "aho-corasick",
  "memchr",
@@ -434,9 +467,9 @@ dependencies = [
 
 [[package]]
 name = "regex-automata"
-version = "0.4.6"
+version = "0.4.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea"
+checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
 dependencies = [
  "aho-corasick",
  "memchr",
@@ -445,9 +478,9 @@ dependencies = [
 
 [[package]]
 name = "regex-syntax"
-version = "0.8.3"
+version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56"
+checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
 
 [[package]]
 name = "rs_htslib"
@@ -461,22 +494,34 @@ dependencies = [
 
 [[package]]
 name = "rustix"
-version = "0.38.34"
+version = "1.0.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f"
+checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
 dependencies = [
  "bitflags",
  "errno",
  "libc",
  "linux-raw-sys",
- "windows-sys",
+ "windows-sys 0.60.2",
 ]
 
+[[package]]
+name = "rustversion"
+version = "1.0.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"
+
+[[package]]
+name = "shlex"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
+
 [[package]]
 name = "smallvec"
-version = "1.13.2"
+version = "1.15.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"
+checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"
 
 [[package]]
 name = "stderrlog"
@@ -499,9 +544,9 @@ checksum = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f"
 
 [[package]]
 name = "syn"
-version = "2.0.66"
+version = "2.0.106"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c42f3f41a2de00b01c0aaad383c5a45241efc8b2d1eda5661812fda5f3cdcff5"
+checksum = "ede7c438028d4436d71104916910f5bb611972c5cfd7f89b8300a8186e6fada6"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -510,14 +555,15 @@ dependencies = [
 
 [[package]]
 name = "tempfile"
-version = "3.10.1"
+version = "3.20.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1"
+checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
 dependencies = [
- "cfg-if",
  "fastrand",
+ "getrandom 0.3.3",
+ "once_cell",
  "rustix",
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -531,51 +577,60 @@ dependencies = [
 
 [[package]]
 name = "thread_local"
-version = "1.1.8"
+version = "1.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c"
+checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
 dependencies = [
  "cfg-if",
- "once_cell",
 ]
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.12"
+version = "1.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
 
 [[package]]
 name = "utf8parse"
-version = "0.2.1"
+version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"
+checksum = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821"
 
 [[package]]
 name = "wasi"
-version = "0.11.0+wasi-snapshot-preview1"
+version = "0.11.1+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
+checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"
+
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
 
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.92"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
 dependencies = [
  "cfg-if",
+ "once_cell",
+ "rustversion",
  "wasm-bindgen-macro",
 ]
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.92"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
 dependencies = [
  "bumpalo",
  "log",
- "once_cell",
  "proc-macro2",
  "quote",
  "syn",
@@ -584,9 +639,9 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.92"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
 dependencies = [
  "quote",
  "wasm-bindgen-macro-support",
@@ -594,9 +649,9 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.92"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -607,97 +662,253 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.92"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
 
 [[package]]
 name = "winapi-util"
-version = "0.1.8"
+version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b"
+checksum = "cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb"
 dependencies = [
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "windows-core"
-version = "0.52.0"
+version = "0.61.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
+dependencies = [
+ "windows-implement",
+ "windows-interface",
+ "windows-link",
+ "windows-result",
+ "windows-strings",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.60.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.59.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-link"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"
+
+[[package]]
+name = "windows-result"
+version = "0.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9"
+checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
 dependencies = [
- "windows-targets",
+ "windows-link",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
+dependencies = [
+ "windows-link",
 ]
 
 [[package]]
 name = "windows-sys"
-version = "0.52.0"
+version = "0.59.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.60.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
+dependencies = [
+ "windows-targets 0.53.3",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
+checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
 dependencies = [
- "windows-targets",
+ "windows_aarch64_gnullvm 0.52.6",
+ "windows_aarch64_msvc 0.52.6",
+ "windows_i686_gnu 0.52.6",
+ "windows_i686_gnullvm 0.52.6",
+ "windows_i686_msvc 0.52.6",
+ "windows_x86_64_gnu 0.52.6",
+ "windows_x86_64_gnullvm 0.52.6",
+ "windows_x86_64_msvc 0.52.6",
 ]
 
 [[package]]
 name = "windows-targets"
-version = "0.52.5"
+version = "0.53.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb"
+checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
 dependencies = [
- "windows_aarch64_gnullvm",
- "windows_aarch64_msvc",
- "windows_i686_gnu",
- "windows_i686_gnullvm",
- "windows_i686_msvc",
- "windows_x86_64_gnu",
- "windows_x86_64_gnullvm",
- "windows_x86_64_msvc",
+ "windows-link",
+ "windows_aarch64_gnullvm 0.53.0",
+ "windows_aarch64_msvc 0.53.0",
+ "windows_i686_gnu 0.53.0",
+ "windows_i686_gnullvm 0.53.0",
+ "windows_i686_msvc 0.53.0",
+ "windows_x86_64_gnu 0.53.0",
+ "windows_x86_64_gnullvm 0.53.0",
+ "windows_x86_64_msvc 0.53.0",
 ]
 
 [[package]]
 name = "windows_aarch64_gnullvm"
-version = "0.52.5"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263"
+checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
 
 [[package]]
 name = "windows_aarch64_msvc"
-version = "0.52.5"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6"
+checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
 
 [[package]]
 name = "windows_i686_gnu"
-version = "0.52.5"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670"
+checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
 
 [[package]]
 name = "windows_i686_gnullvm"
-version = "0.52.5"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9"
+checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
 
 [[package]]
 name = "windows_i686_msvc"
-version = "0.52.5"
+version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf"
+checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
 
 [[package]]
 name = "windows_x86_64_gnu"
-version = "0.52.5"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9"
+checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
 
 [[package]]
 name = "windows_x86_64_gnullvm"
-version = "0.52.5"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596"
+checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
 
 [[package]]
 name = "windows_x86_64_msvc"
-version = "0.52.5"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
+
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags",
+]
+
+[[package]]
+name = "zerocopy"
+version = "0.8.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1039dd0d3c310cf05de012d8a39ff557cb0d23087fd44cad61df08fc31907a2f"
+dependencies = [
+ "zerocopy-derive",
+]
+
+[[package]]
+name = "zerocopy-derive"
+version = "0.8.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ecf5b4cc5364572d7f4c329661bcc82724222973f2cab6f050a4e5c22f75181"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
diff --git a/Cargo.toml b/Cargo.toml
index 2827295..5a0e302 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,7 +1,7 @@
 [package]
 name = "bam2bedmethyl"
 version = "0.4.0"
-edition = "2021"
+edition = "2024"
 authors = ["Simon Heath (simon.heath@gmail.com)"]
 description = "Extract methylation information from a BAM file (MM/ML tags) and create a bedmethyl file"
 
diff --git a/src/cli.rs b/src/cli.rs
index 55f1748..775f5ee 100644
--- a/src/cli.rs
+++ b/src/cli.rs
@@ -73,7 +73,7 @@ pub fn cli_model() -> Command {
                 .long("min-prob")
                 .value_parser(value_parser!(f64))
                 .value_name("PROB (0.5-1)")
-                .default_value("0.75")
+                .default_value("0.8")
                 .help("Minimum prob. to call a methylation value"),
         )
         .arg(
diff --git a/src/config.rs b/src/config.rs
index 062244c..bd2d196 100644
--- a/src/config.rs
+++ b/src/config.rs
@@ -47,7 +47,7 @@ impl Config {
         self.pileup
     }
     pub fn ref_file(&self) -> &Path {
-        &self.ref_file.as_path()
+        self.ref_file.as_path()
     }
     pub fn discard(&self) -> f64 {
         self.discard
@@ -105,7 +105,7 @@ pub fn handle_cli() -> anyhow::Result<Config> {
         .expect("Missing default value");
 
     let prob_threshold = match m.get_one::<f64>("min_prob").expect("Missing default value") {
-        x if (0.5..=1.0).contains(x) => Ok((x * 256.0).round().min(255.0) as u8),
+        x if (0.5..=1.0).contains(x) => Ok((x * 256.0 - 0.5).round().min(255.0) as u8),
         x => Err(anyhow!("meth probability option {} not in range 0.5-1", x)),
     }?;
 
@@ -113,7 +113,7 @@ pub fn handle_cli() -> anyhow::Result<Config> {
     let threads = m
         .get_one::<NonZeroUsize>("threads")
         .map(|i| usize::from(*i))
-        .unwrap_or_else(|| num_cpus::get());
+        .unwrap_or_else(num_cpus::get);
 
     // If multiple treads requested, set up HtsThreadPool
     let hts_thread_pool = if threads > 1 {
diff --git a/src/main.rs b/src/main.rs
index 3eb1365..54e673c 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -5,7 +5,6 @@ extern crate log;
 
 mod cli;
 mod config;
-mod count_block;
 mod output;
 mod process_read;
 mod read;
diff --git a/src/output.rs b/src/output.rs
index 84f99cf..1f38896 100644
--- a/src/output.rs
+++ b/src/output.rs
@@ -15,10 +15,10 @@ use crossbeam_channel::{bounded, Receiver, Sender};
 
 use super::{
     config::Config,
-    count_block::{CountBlock, CpG},
+    process_read::count_block::{CountBlock, CpG},
 };
 
-use crate::read::pileup::PileupEntry;
+use crate::read::pileup::PileupCode;
 
 fn make_output_paths(prefix: &str) -> [PathBuf; 3] {
     let path_combined = PathBuf::from(format!("{prefix}_cpg.bed"));
@@ -31,7 +31,7 @@ fn make_output_stream(path: &Path, ct: CompressType) -> anyhow::Result<Writer> {
     CompressIo::new()
         .path(path)
         .ctype(ct)
-        .cthreads(CompressThreads::Set(2))
+        .cthreads(CompressThreads::Set(4))
         .writer()
         .with_context(|| "Could not open output file/stream")
 }
@@ -152,12 +152,14 @@ fn output_block_thread<'a>(
     let mut chan = Vec::with_capacity(4);
 
     for (ix, w1) in wrt.iter_mut().enumerate() {
-        let (snd, rcv) = bounded(2);
-        chan.push(snd);
         if ix < 3 {
+            let (snd, rcv) = bounded(2);
+            chan.push(snd);
             let w = w1.take().unwrap();
             jh.push(s.spawn(move || cpg_writer_thread(w, ctg_names, rcv, ix)))
         } else if let Some(w) = w1.take() {
+            let (snd, rcv) = bounded(2);
+            chan.push(snd);
             jh.push(s.spawn(move || pileup_writer_thread(w, ctg_names, rcv)))
         }
     }
@@ -300,15 +302,15 @@ fn write_pileup(w: &mut Writer, start: usize, ctg: &str, c: &CpG) -> anyhow::Res
     if let Some(v) = c.pileup() {
         let mut cts: [u32; 8] = [0; 8];
         for e in v.iter() {
-            if let Some(ix) = match e {
-                PileupEntry::CytosineFwd => Some(0),
-                PileupEntry::MethCytosineFwd => Some(1),
-                PileupEntry::HydroxyMethCytosineFwd => Some(2),
-                PileupEntry::TotalMethFwd => Some(3),
-                PileupEntry::CytosineRev => Some(4),
-                PileupEntry::MethCytosineRev => Some(5),
-                PileupEntry::HydroxyMethCytosineRev => Some(6),
-                PileupEntry::TotalMethRev => Some(7),
+            if let Some(ix) = match e.code() {
+                PileupCode::CytosineFwd => Some(0),
+                PileupCode::MethCytosineFwd => Some(1),
+                PileupCode::HydroxyMethCytosineFwd => Some(2),
+                PileupCode::TotalMethFwd => Some(3),
+                PileupCode::CytosineRev => Some(4),
+                PileupCode::MethCytosineRev => Some(5),
+                PileupCode::HydroxyMethCytosineRev => Some(6),
+                PileupCode::TotalMethRev => Some(7),
                 _ => None,
             } {
                 cts[ix] += 1
diff --git a/src/process_read.rs b/src/process_read.rs
index 0702ac4..5710375 100644
--- a/src/process_read.rs
+++ b/src/process_read.rs
@@ -1,22 +1,25 @@
+pub mod count_block;
 mod meth_itr;
 pub mod process_block;
 
 use crossbeam_channel::{Receiver, Sender};
 
-use rs_htslib::sam::{parse_mod_tags, BamRec, CigarOp, MMParse};
+use rs_htslib::sam::{BamRec, CigarOp, MMParse, parse_mod_tags};
 
 use super::{
     config::Config,
-    count_block::CountBlock,
-    read::{pileup::PileupEntry, read_record::ReadRec},
+    read::{
+        pileup::{PileupCode, PileupEntry},
+        read_record::ReadRec,
+    },
     reference::Reference,
 };
 
 use crate::read::brec_block::*;
 
-use process_block::ProcessBlock;
-
+use count_block::CountBlock;
 use meth_itr::MethItr;
+use process_block::ProcessBlock;
 
 fn get_read_coords(rec: &BamRec) -> anyhow::Result<(usize, usize)> {
     let tid = rec.tid().ok_or(anyhow!("Missing tid for BAM record"))?;
@@ -25,15 +28,15 @@ fn get_read_coords(rec: &BamRec) -> anyhow::Result<(usize, usize)> {
     Ok((tid, x))
 }
 
-const PILEUP_ITEMS: [PileupEntry; 8] = [
-    PileupEntry::CytosineFwd,
-    PileupEntry::TotalMethFwd,
-    PileupEntry::MethCytosineFwd,
-    PileupEntry::HydroxyMethCytosineFwd,
-    PileupEntry::CytosineRev,
-    PileupEntry::TotalMethRev,
-    PileupEntry::MethCytosineRev,
-    PileupEntry::HydroxyMethCytosineRev,
+const PILEUP_ITEMS: [PileupCode; 8] = [
+    PileupCode::CytosineFwd,
+    PileupCode::TotalMethFwd,
+    PileupCode::MethCytosineFwd,
+    PileupCode::HydroxyMethCytosineFwd,
+    PileupCode::CytosineRev,
+    PileupCode::TotalMethRev,
+    PileupCode::MethCytosineRev,
+    PileupCode::HydroxyMethCytosineRev,
 ];
 
 fn process_record(
@@ -48,6 +51,8 @@ fn process_record(
     let rec = rrec.brec();
     // Find and parse MM/ML tags from record
     if let Some(tags) = parse_mod_tags(rec, mm_parse)? {
+        let mut cts: [u32; 4] = [0; 4];
+
         // Tags found.  Make iterator over modified positions
         let mod_iter = mm_parse.mk_pos_iter(rec, &tags)?;
         let mut meth_itr = MethItr::new(mod_iter);
@@ -82,7 +87,7 @@ fn process_record(
 
         // Setup pileup counts if required
         if let Some(ix) = pileup_ix {
-            cb.init_pileup_index(ix, x, y, read_rev)
+            cb.init_pileup_index(ix, x, y)
         }
 
         // Iterate through cigar ops
@@ -104,39 +109,54 @@ fn process_record(
                         // modifications present for this record.
                         if let Some((_, _, p)) = meth_itr.next() {
                             let (i, _) = ref_itr.next().expect("Bad CIGAR");
-                            if let Some((m, rev)) = p.and_then(|(x_m, x_h, rev)| {
+                            if let Some((om, x_m, x_h, rev)) = p.map(|(x_m, x_h, rev)| {
                                 if x_m >= thresh {
-                                    Some((2, rev))
+                                    (Some(2), x_m, x_h, rev)
                                 } else if x_h >= thresh {
-                                    Some((3, rev))
+                                    (Some(3), x_m, x_h, rev)
                                 } else if x_m + x_h >= thresh {
-                                    Some((1, rev))
+                                    (Some(1), x_m, x_h, rev)
                                 } else if x_m + x_h <= thresh1 {
-                                    Some((0, rev))
+                                    (Some(0), x_m, x_h, rev)
                                 } else {
-                                    None
+                                    (None, x_m, x_h, rev)
                                 }
                             }) {
                                 // XOR
                                 let r = (read_rev || rev) && !(read_rev && rev);
 
                                 if let Some(z) = if r {
-                                    if i > 0 {
-                                        Some(i + delta_x - 1)
-                                    } else {
-                                        None
-                                    }
+                                    if i > 0 { Some(i + delta_x - 1) } else { None }
                                 } else {
                                     Some(i + delta_x)
-                                } {
-                                    if let Some(cpg) = cb.find_site(z as u32) {
+                                } && let Some(cpg) = cb.find_site(z as u32)
+                                {
+                                    if let Some(m) = om {
+                                        cts[m] += 1;
                                         cpg.incr_count(m, r);
                                         if let Some(k) = pileup_ix {
                                             cpg.add_to_pileup(
                                                 k,
-                                                PILEUP_ITEMS[if r { m + 4 } else { m }],
+                                                PileupEntry::new(
+                                                    PILEUP_ITEMS[if r { m + 4 } else { m }],
+                                                    x_m,
+                                                    x_h,
+                                                ),
                                             )
                                         }
+                                    } else if let Some(k) = pileup_ix {
+                                        cpg.add_to_pileup(
+                                            k,
+                                            PileupEntry::new(
+                                                if r {
+                                                    PileupCode::UncalledRev
+                                                } else {
+                                                    PileupCode::UncalledFwd
+                                                },
+                                                x_m,
+                                                x_h,
+                                            ),
+                                        )
                                     }
                                 }
                             }
@@ -175,7 +195,7 @@ pub(super) fn process_read_thread(
     block_recv: Receiver<ProcessBlock>,
     block_send: Sender<BRecBlock>,
 ) -> anyhow::Result<()> {
-    debug!("prcoess read thread {} starting up", ix);
+    debug!("process read thread {} starting up", ix);
 
     let mut mm_parse = MMParse::default();
     mm_parse
diff --git a/src/process_read/count_block.rs b/src/process_read/count_block.rs
index 354557b..c85c596 100644
--- a/src/process_read/count_block.rs
+++ b/src/process_read/count_block.rs
@@ -18,7 +18,7 @@ impl CountBlock {
 
         // Go through reference to find CpG sites
         for (i, c) in rf.windows(2).enumerate() {
-            if c[0].to_ascii_uppercase() == b'C' && c[1].to_ascii_uppercase() == b'G' {
+            if c[0].eq_ignore_ascii_case(&b'C') && c[1].eq_ignore_ascii_case(&b'G') {
                 cpg_sites.push(CpG::new(i as u32, gen_pileup))
             }
         }
@@ -31,7 +31,7 @@ impl CountBlock {
         }
     }
 
-    pub(crate) fn init_pileup_index(&mut self, ix: usize, x: usize, y: usize, reverse: bool) {
+    pub(crate) fn init_pileup_index(&mut self, ix: usize, x: usize, y: usize) {
         assert!(x >= self.start && y >= x, "Illegal read coordinates");
         let x1 = x - self.start;
         let y1 = y - self.start;
@@ -45,7 +45,7 @@ impl CountBlock {
             .map(|i| i + 1)
             .unwrap_or_else(|i| i);
         for c in self.cpg_sites[i..j].iter_mut() {
-            c.reserve_pileup(ix, reverse)
+            c.reserve_pileup(ix)
         }
     }
 
@@ -151,8 +151,8 @@ impl CpG {
     }
 
     #[inline]
-    pub(crate) fn add_to_pileup(&mut self, ix: usize, m: PileupEntry) {
-        self.pileup.as_mut().expect("Missing pileup")[ix] = m;
+    pub(crate) fn add_to_pileup(&mut self, ix: usize, e: PileupEntry) {
+        self.pileup.as_mut().expect("Missing pileup")[ix] = e;
     }
 
     #[inline]
@@ -173,10 +173,9 @@ impl CpG {
                 v1.resize(v2.len(), PileupEntry::default())
             }
             for (p1, p2) in v1.iter_mut().zip(v2.iter()) {
-                match (*p1, *p2) {
-                    (_, PileupEntry::NotPresent) => {}
-                    (PileupEntry::NotPresent, e) => *p1 = e,
-                    _ => panic!("Clash when merging pileups"),
+                if p2.is_present() {
+                    assert!(!p1.is_present(), "Clash when merging pileups");
+                    *p1 = *p2
                 }
             }
         } else {
@@ -184,14 +183,10 @@ impl CpG {
         }
     }
 
-    fn reserve_pileup(&mut self, ix: usize, reverse: bool) {
+    fn reserve_pileup(&mut self, ix: usize) {
         let v = self.pileup.as_mut().expect("Missing pileup vector");
 
-        let uncalled = if reverse {
-            PileupEntry::UncalledRev
-        } else {
-            PileupEntry::UncalledFwd
-        };
+        let uncalled = PileupEntry::new_missing();
 
         if v.len() < ix + 1 {
             v.resize(ix + 1, PileupEntry::default())
diff --git a/src/read.rs b/src/read.rs
index 3e58b79..5ac53ed 100644
--- a/src/read.rs
+++ b/src/read.rs
@@ -63,7 +63,7 @@ pub fn read_input(cfg: &Config, rf: &Reference) -> anyhow::Result<()> {
     }
 
     // Set number of process threads, so we have 1-2 hts threads per proc thread
-    let n_proc = (cfg.threads() + 1) / 2;
+    let n_proc = cfg.threads().div_ceil(2);
 
     // Create list of blocks to hold records
     // We create enough so that each process thread and the output thread can have 1 block being
@@ -196,6 +196,7 @@ pub fn read_input(cfg: &Config, rf: &Reference) -> anyhow::Result<()> {
 
 /// Fill BRecBlock blk with BamRec read from hts. Returns an indicator of end-of-stream
 /// or an error if any error occurred while reading
+#[allow(clippy::too_many_arguments)]
 fn fill_b_rec_block(
     cfg: &Config,
     rdr: &mut SamReader,
diff --git a/src/read/brec_block.rs b/src/read/brec_block.rs
index 54d8cb0..3fe0f24 100644
--- a/src/read/brec_block.rs
+++ b/src/read/brec_block.rs
@@ -7,8 +7,6 @@ use super::read_record::ReadRec;
 ///
 /// brec_vec is always fully populated with BamRec, and ix is the index of the next available
 /// element.  If ix == brec_vec.len() then the block is full and nothing can be added
-///
-
 const BREC_BLOCK_SIZE: usize = 256;
 
 pub struct BRecBlock {
@@ -40,11 +38,11 @@ impl BRecBlock {
         self.ix = 0
     }
 
-    pub(super) fn next_rec(
-        &mut self,
+    pub(super) fn next_rec<'a>(
+        &'a mut self,
         rdr: &mut SamReader,
-        pending: &mut Option<ReadRec>,
-    ) -> anyhow::Result<BrecFill> {
+        pending: &'a mut Option<ReadRec>,
+    ) -> anyhow::Result<BrecFill<'a>> {
         Ok(match self.read_rec_vec.get_mut(self.ix) {
             Some(b) => {
                 if let Some(r) = pending.take() {
diff --git a/src/read/pileup.rs b/src/read/pileup.rs
index 1d6937f..ef18274 100644
--- a/src/read/pileup.rs
+++ b/src/read/pileup.rs
@@ -66,9 +66,10 @@ impl Pileup {
 }
 
 #[derive(Debug, Default, Copy, Clone, Eq, PartialEq)]
-pub(crate) enum PileupEntry {
+pub(crate) enum PileupCode {
     #[default]
     NotPresent = 0,
+    Missing,
     CytosineFwd,
     MethCytosineFwd,
     HydroxyMethCytosineFwd,
@@ -81,10 +82,58 @@ pub(crate) enum PileupEntry {
     UncalledRev,
 }
 
-const PE_OUTPUT: [char; 11] = [' ', 'C', 'M', 'H', 'T', '.', 'c', 'm', 'h', 't', ','];
+const PE_OUTPUT: [char; 12] = [' ', '-', 'C', 'M', 'H', 'T', '.', 'c', 'm', 'h', 't', ','];
 
-impl fmt::Display for PileupEntry {
+impl fmt::Display for PileupCode {
     fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
         write!(f, "{}", PE_OUTPUT[*self as usize])
     }
 }
+
+#[derive(Debug, Default, Copy, Clone)]
+pub(crate) struct PileupEntry {
+    code: PileupCode,
+    prob_mc: u8, // Probability coded as 0-255 on a linear scale with 255 = 1.0 and  0 = 0.0
+    prob_hmc: u8,
+}
+
+impl fmt::Display for PileupEntry {
+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
+        write!(f, "{}", PE_OUTPUT[self.code as usize])?;
+        if matches!(self.code, PileupCode::NotPresent | PileupCode::Missing) {
+            write!(f, "    ")
+        } else {
+            write!(f, "{:02x}{:02x}", self.prob_mc, self.prob_hmc)
+        }
+    }
+}
+
+impl PileupEntry {
+    #[inline]
+    pub(crate) fn new(code: PileupCode, prob_mc: u8, prob_hmc: u8) -> Self {
+        Self {
+            code,
+            prob_mc,
+            prob_hmc,
+        }
+    }
+
+    #[inline]
+    pub(crate) fn new_missing() -> Self {
+        Self {
+            code: PileupCode::Missing,
+            prob_hmc: 0,
+            prob_mc: 0,
+        }
+    }
+
+    #[inline]
+    pub(crate) fn code(&self) -> PileupCode {
+        self.code
+    }
+
+    #[inline]
+    pub(crate) fn is_present(&self) -> bool {
+        !matches!(self.code, PileupCode::NotPresent)
+    }
+}
diff --git a/src/reference.rs b/src/reference.rs
index a5a2f78..3733960 100644
--- a/src/reference.rs
+++ b/src/reference.rs
@@ -251,7 +251,7 @@ fn find_cpgs(v: &[u8], start: usize) -> Vec<u64> {
     let mut x = start as u64;
     let mut cpgs = Vec::new();
     for p in v.windows(2) {
-        if p[0].to_ascii_uppercase() == b'C' && p[1].to_ascii_uppercase() == b'G' {
+        if p[0].eq_ignore_ascii_case(&b'C') && p[1].eq_ignore_ascii_case(&b'G') {
             cpgs.push(x);
         }
         x += 1;
